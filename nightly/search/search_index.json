{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>bottom</code>","text":"<p>A customizable cross-platform graphical process/system monitor for the terminal, supporting Linux, macOS, and Windows. Inspired by other tools like gtop, gotop, and htop.</p> <p>This site serves as extended documentation for bottom alongside the <code>README.md</code>.</p> <p>Warning</p> <p>Some areas of this site are still in progress and may be missing details.  Feel free to suggest/contribute changes!</p>"},{"location":"#installation","title":"Installation","text":"<p>Tip</p> <p>It's as good idea to first check out the Support page to see if your system is officially supported!</p> <p>Tip</p> <p>If you're facing some issues during/after installation, check out the Troubleshooting page for some common problems and solutions.</p> <p>To install bottom, refer to the installation section of the <code>README.md</code>, which contains a list of all the installation methods.</p>"},{"location":"#usage-and-configuration","title":"Usage and configuration","text":"<p>The command to run bottom is <code>btm</code>.</p> <p>You can refer to the usage pages for more details on using bottom (e.g. keybinds, some features, a general overview of what each widget does).</p> <p>To configure bottom (e.g. how it behaves, how it looks, etc.) refer to the command-line options page for temporary settings, or the config file page for more permanent settings.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>New contributors are always welcome! See the contribution section for how to contribute to bottom, whether it be filing issues, writing documentation, creating pull requests, etc.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#the-graph-points-look-brokenstrange","title":"The graph points look broken/strange","text":"<p>It's possible that your graphs won't look great out of the box due to the reliance on braille fonts to draw them. One example of this is seeing a bunch of missing font characters, caused when the terminal isn't configured properly to render braille fonts.</p> <sub>An example of missing braille fonts in Powershell</sub> <p>One alternative is to use the <code>--dot_marker</code> option to render graph charts using dots instead of the braille characters, which generally seems better supported out of the box, at the expense of looking less intricate:</p> <sub>Example using <code>btm --dot_marker</code></sub> <p>Another (better) alternative is to install a font that supports braille fonts, and configure your terminal emulator to use it. For example, installing something like UBraille or Iosevka and ensuring your terminal uses it should work.</p>"},{"location":"troubleshooting/#braille-font-issues-on-linuxmacosunix-like","title":"Braille font issues on Linux/macOS/Unix-like","text":"<p>Generally, the problem comes down to you either not having a font that supports the braille markers, or your terminal emulator is not using the correct font for the braille markers.</p> <p>See here for possible fixes if you're having font issues on Linux, which may also be helpful for macOS or other Unix-like systems.</p> <p>If you're still having issues, feel free to open a discussion question about it.</p>"},{"location":"troubleshooting/#installing-fonts-for-windows-command-promptpowershell","title":"Installing fonts for Windows Command Prompt/PowerShell","text":"<p>Note: I would advise backing up your registry beforehand if you aren't sure what you are doing!</p> <p>Let's say you're installing Iosevka. The steps you can take are:</p> <ol> <li>Install the font itself.</li> <li>Open the registry editor, which you can do either by <code>Win+R</code> and opening <code>regedit</code>, or just opening it from the Start Menu.</li> <li> <p>In the registry editor, go to</p> <pre><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont\n</code></pre> </li> <li> <p>Here, add a new <code>String value</code>, and set the <code>Name</code> to a bunch of 0's (e.g. <code>000</code> - make sure the name isn't already used), then set the <code>Data</code> to the font name (e.g. <code>Iosevka</code>).</p> <p> <sub>The last entry is the new entry for Iosevka</sub> </p> </li> <li> <p>Then, open the Command Prompt/PowerShell, and right-click on the top bar, and open \"Properties\":</p> <p> </p> </li> <li> <p>From here, go to \"Font\", and set the font to your new font (so in this example, Iosevka):</p> </li> </ol>"},{"location":"troubleshooting/#why-cant-i-see-all-my-temperature-sensors-on-windows","title":"Why can't I see all my temperature sensors on Windows?","text":"<p>This is a known limitation, some sensors may require admin privileges to get sensor data.</p>"},{"location":"troubleshooting/#why-dont-i-see-dual-batteries-on-windows-reported-separately-eg-thinkpads","title":"Why don't I see dual batteries on Windows reported separately? (e.g. Thinkpads)","text":"<p>This is a known limitation which seems to be with how batteries are being detected on Windows.</p>"},{"location":"troubleshooting/#why-cant-i-see-all-my-temperature-sensors-on-wsl","title":"Why can't I see all my temperature sensors on WSL?","text":"<p>This is a known limitation with WSL. Due to how it works, hosts may not expose their temperature sensors and therefore, temperature sensors might be missing.</p>"},{"location":"troubleshooting/#why-does-wsl2-not-match-task-manager","title":"Why does WSL2 not match Task Manager?","text":"<p>This is a known limitation with WSL2. Due to how WSL2 works, the two might not match up in terms of reported data.</p>"},{"location":"troubleshooting/#why-cant-i-see-all-my-processesprocess-data-on-macos","title":"Why can't I see all my processes/process data on macOS?","text":"<p>This is a known limitation, and you may have to run the program with elevated privileges to work around it - for example:</p> <pre><code>sudo btm\n</code></pre> <p>Please note that you should be certain that you trust any software you grant root privileges.</p> <p>There are measures taken to try to maximize the amount of information obtained without elevated privileges. For example, one can modify the instructions found on the htop wiki on how to run htop without sudo for bottom. However, please understand the potential security risks before doing so!</p>"},{"location":"troubleshooting/#my-configuration-file-isnt-working","title":"My configuration file isn't working","text":"<p>If your configuration files aren't working, here are a few things to try:</p>"},{"location":"troubleshooting/#check-the-formatting","title":"Check the formatting","text":"<p>It may be handy to refer to the automatically generated config files or the sample configuration files. The config files also follow the TOML format.</p> <p>Also make sure your config options are under the right table - for example, to set your temperature type, you must set it under the <code>[flags]</code> table:</p> <pre><code>[flags]\ntemperature_type = \"f\"\n</code></pre> <p>Meanwhile, if you want to set a custom color scheme, it would be under the <code>[styles]</code> table:</p> <pre><code>[styles.tables.headers]\ncolor=\"LightBlue\"\n</code></pre> <p>To help validate your configuration files, there is JSON Schema support if your IDE/editor supports it.</p>"},{"location":"troubleshooting/#check-the-configuration-file-location","title":"Check the configuration file location","text":"<p>Make sure bottom is reading the right configuration file. By default, bottom looks for config files at these locations:</p> OS Default Config Location macOS <code>$HOME/Library/Application Support/bottom/bottom.toml</code> <code>~/.config/bottom/bottom.toml</code> <code>$XDG_CONFIG_HOME/bottom/bottom.toml</code> Linux <code>~/.config/bottom/bottom.toml</code> <code>$XDG_CONFIG_HOME/bottom/bottom.toml</code> Windows <code>C:\\Users\\&lt;USER&gt;\\AppData\\Roaming\\bottom\\bottom.toml</code> <p>If you want to use a config file in another location, use the <code>--config</code> or <code>-C</code> flags along with the path to the configuration file, like so:</p> <pre><code>btm -C path_to_config\n</code></pre>"},{"location":"troubleshooting/#my-installation-through-snap-has-some-widgets-that-are-blankshow-no-data","title":"My installation through snap has some widgets that are blank/show no data","text":"<p>Make sure bottom is given the correct permissions in order to collect data. Snapcraft explains how to do so, but the TL;DR is:</p> <pre><code>sudo snap connect bottom:mount-observe\nsudo snap connect bottom:hardware-observe\nsudo snap connect bottom:system-observe\nsudo snap connect bottom:process-control\n</code></pre>"},{"location":"configuration/command-line-options/","title":"Command-line Options","text":"<p>The following options can be provided to bottom in the command line to change the behaviour of the program. You can also see information on these options by running <code>btm -h</code>, or run <code>btm --help</code> to display more detailed information on each option:</p>"},{"location":"configuration/command-line-options/#general-options","title":"General Options","text":"Option Behaviour <code>--autohide_time</code> Temporarily shows the time scale in graphs. <code>-b, --basic</code> Hides graphs and uses a more basic look. <code>-C, --config &lt;CONFIG PATH&gt;</code> Sets the location of the config file. <code>-t, --default_time_value &lt;TIME&gt;</code> Default time value for graphs. <code>--default_widget_count &lt;N&gt;</code> Sets the N'th selected widget type as the default. <code>--default_widget_type &lt;WIDGET&gt;</code> Sets the default widget type, use <code>--help</code> for info. <code>--disable_click</code> Disables mouse clicks. <code>-m, --dot_marker</code> Uses a dot marker for graphs. <code>-e, --expanded</code> Expand the default widget upon starting the app. <code>--hide_table_gap</code> Hides spacing between table headers and entries. <code>--hide_time</code> Hides the time scale from being shown. <code>-r, --rate &lt;TIME&gt;</code> Sets how often data is refreshed. <code>--retention &lt;TIME&gt;</code> How far back data will be stored up to. <code>--show_table_scroll_position</code> Shows the scroll position tracker in table widgets. <code>-d, --time_delta &lt;TIME&gt;</code> The amount of time changed upon zooming."},{"location":"configuration/command-line-options/#process-options","title":"Process Options","text":"Option Behaviour <code>-S, --case_sensitive</code> Enables case sensitivity by default. <code>-u, --current_usage</code> Calculates process CPU usage as a percentage of current usage rather than total usage. <code>--disable_advanced_kill</code> Hides additional stopping options Unix-like systems. <code>-g, --group_processes</code> Groups processes with the same name by default. <code>--process_memory_as_value</code> Defaults to showing process memory usage by value. <code>--process_command</code> Shows the full command name instead of the process name by default. <code>-R, --regex</code> Enables regex by default while searching. <code>-T, --tree</code> Makes the process widget use tree mode by default. <code>-n, --unnormalized_cpu</code> Show process CPU% usage without averaging over the number of CPU cores. <code>-W, --whole_word</code> Enables whole-word matching by default while searching."},{"location":"configuration/command-line-options/#temperature-options","title":"Temperature Options","text":"Option Behaviour <code>-c, --celsius</code> Use Celsius as the temperature unit. Default. <code>-f, --fahrenheit</code> Use Fahrenheit as the temperature unit. <code>-k, --kelvin</code> Use Kelvin as the temperature unit."},{"location":"configuration/command-line-options/#cpu-options","title":"CPU Options","text":"Option Behaviour <code>--cpu_left_legend</code> Puts the CPU chart legend on the left side. <code>--default_cpu_entry</code> Sets which CPU entry type is selected by default. <code>-a, --hide_avg_cpu</code> Hides the average CPU usage entry."},{"location":"configuration/command-line-options/#memory-options","title":"Memory Options","text":"Option Behaviour <code>--memory_legend &lt;POSITION&gt;</code> Where to place the legend for the memory chart widget. <code>--enable_cache_memory</code> Enable collecting and displaying cache and buffer memory."},{"location":"configuration/command-line-options/#network-options","title":"Network Options","text":"Option Behaviour <code>--network_legend &lt;POSITION&gt;</code> Where to place the legend for the network chart widget. <code>--network_use_bytes</code> Displays the network widget using bytes. <code>--network_use_binary_prefix</code> Displays the network widget with binary prefixes. <code>--network_use_log</code> Displays the network widget with a log scale. <code>--use_old_network_legend</code> (DEPRECATED) Uses a separate network legend."},{"location":"configuration/command-line-options/#battery-options","title":"Battery Options","text":"Option Behaviour <code>--battery</code> Shows the battery widget in non-custom layouts."},{"location":"configuration/command-line-options/#gpu-options","title":"GPU Options","text":"Option Behaviour <code>--disable_gpu</code> Disable collecting and displaying NVIDIA GPU information."},{"location":"configuration/command-line-options/#style-options","title":"Style Options","text":"Option Behaviour <code>--theme &lt;SCHEME&gt;</code> Use a built-in color theme, use '--help' for info on the colors."},{"location":"configuration/command-line-options/#other-options","title":"Other Options","text":"Option Behaviour <code>-h</code>, <code>--help</code> Prints help info (for more details use <code>--help</code>.) <code>-V</code>, <code>--version</code> Prints version information."},{"location":"configuration/config-file/","title":"Config File","text":"<p>For persistent configuration, and for certain configuration options, bottom supports config files.</p>"},{"location":"configuration/config-file/#default-config-file","title":"Default Config File","text":"<p>If no config file argument is given, it will automatically look for a config file at these locations:</p> OS Default Config Location macOS <code>$HOME/Library/Application Support/bottom/bottom.toml</code> <code>$HOME/.config/bottom/bottom.toml</code> <code>$XDG_CONFIG_HOME/bottom/bottom.toml</code> Linux <code>$HOME/.config/bottom/bottom.toml</code> <code>$XDG_CONFIG_HOME/bottom/bottom.toml</code> Windows <code>C:\\Users\\&lt;USER&gt;\\AppData\\Roaming\\bottom\\bottom.toml</code> <p>If the config file doesn't exist at the path, bottom will automatically try to create a new config file at the location with default values.</p>"},{"location":"configuration/config-file/#json-schema","title":"JSON Schema","text":"<p>The configuration file also has JSON Schema support to make it easier to manage, if your IDE/editor supports it.</p>"},{"location":"configuration/config-file/cpu/","title":"CPU","text":""},{"location":"configuration/config-file/cpu/#default-cpu-graph-selection","title":"Default CPU Graph Selection","text":"<p>You can configure which CPU graph is shown by default when starting up bottom by setting <code>cpu.default</code>.</p> <pre><code>[cpu]\n# One of \"all\" (default), \"average\"/\"avg\"\ndefault = \"average\"\n</code></pre>"},{"location":"configuration/config-file/data-filtering/","title":"Data Filtering","text":"<p>Warning</p> <p>This section is in progress, and is just copied from the old documentation.</p> <p>You can hide specific disks, temperature sensors, and networks by name in the config file via <code>disk.name_filter</code> and <code>disk.mount_filter</code>, <code>temperature.sensor_filter</code>, and <code>network.interface_filter</code> respectively. Regex (<code>regex = true</code>), case-sensitivity (<code>case_sensitive = true</code>), and matching only if the entire word matches (<code>whole_word = true</code>) are supported, but are off by default. Filters default to denying entries that match and can be toggled by setting <code>is_list_ignored</code> to <code>false</code> in the config file.</p> <p>For example, here's the disk widget with no filter:</p> <p></p> <p>The following in the config file would filter out some entries by disk name:</p> <pre><code>[disk.name_filter]\nis_list_ignored = true\nlist = [\"/dev/sda\"]\nregex = true\ncase_sensitive = false\nwhole_word = false\n</code></pre> <p></p> <p>If there are two potentially conflicting filters (i.e. when you are using both a disk and mount filter), the filter that explicitly allows an entry takes precedence over a filter that explicitly denies one. So for example, let's say we set a disk filter accepting anything with <code>/dev/sda</code>, but deny anything with <code>/mnt/.*</code> or <code>/</code>. So to do so, we write in the config file:</p> <pre><code>[disk.name_filter]\nis_list_ignored = false\nlist = [\"/dev/sda\"]\nregex = true\ncase_sensitive = false\nwhole_word = false\n\n[disk.mount_filter]\nis_list_ignored = true\nlist = [\"/mnt/.*\", \"/\"]\nregex = true\ncase_sensitive = false\nwhole_word = true\n</code></pre> <p>This gives us:</p> <p></p>"},{"location":"configuration/config-file/flags/","title":"Flags","text":"<p>Warning</p> <p>This section is in progress, and is just copied from the old documentation.</p> <p>You can configure flags by putting them in <code>[flags]</code> table. Example:</p> <pre><code>[flags]\nhide_avg_cpu = true\n</code></pre> <p>Most of the command line flags have config file equivalents to avoid having to type them out each time:</p> Field Type Functionality <code>hide_avg_cpu</code> Boolean Hides the average CPU usage. <code>dot_marker</code> Boolean Uses a dot marker for graphs. <code>cpu_left_legend</code> Boolean Puts the CPU chart legend to the left side. <code>current_usage</code> Boolean Sets process CPU% to be based on current CPU%. <code>group_processes</code> Boolean Groups processes with the same name by default. <code>case_sensitive</code> Boolean Enables case sensitivity by default. <code>whole_word</code> Boolean Enables whole-word matching by default. <code>regex</code> Boolean Enables regex by default. <code>basic</code> Boolean Hides graphs and uses a more basic look. <code>use_old_network_legend</code> Boolean DEPRECATED - uses the older network legend. <code>battery</code> Boolean Shows the battery widget. <code>rate</code> Unsigned Int (represents milliseconds) or String (represents human time) Sets a refresh rate in ms. <code>default_time_value</code> Unsigned Int (represents milliseconds) or String (represents human time) Default time value for graphs in ms. <code>time_delta</code> Unsigned Int (represents milliseconds) or String (represents human time) The amount in ms changed upon zooming. <code>hide_time</code> Boolean Hides the time scale. <code>temperature_type</code> String (one of [\"k\", \"f\", \"c\", \"kelvin\", \"fahrenheit\", \"celsius\"]) Sets the temperature unit type. <code>default_widget_type</code> String (one of [\"cpu\", \"proc\", \"net\", \"temp\", \"mem\", \"disk\"], same as layout options) Sets the default widget type, use --help for more info. <code>default_widget_count</code> Unsigned Int (represents which <code>default_widget_type</code>) Sets the n'th selected widget type as the default. <code>disable_click</code> Boolean Disables mouse clicks. <code>enable_cache_memory</code> Boolean Enable cache and buffer memory stats (not available on Windows). <code>process_memory_as_value</code> Boolean Defaults to showing process memory usage by value. <code>tree</code> Boolean Defaults to showing the process widget in tree mode. <code>show_table_scroll_position</code> Boolean Shows the scroll position tracker in table widgets. <code>process_command</code> Boolean Show processes as their commands by default. <code>disable_advanced_kill</code> Boolean Hides advanced options to stop a process on Unix-like systems. <code>network_use_binary_prefix</code> Boolean Displays the network widget with binary prefixes. <code>network_use_bytes</code> Boolean Displays the network widget using bytes. <code>network_use_log</code> Boolean Displays the network widget with a log scale. <code>disable_gpu</code> Boolean Disable NVIDIA GPU data collection. <code>retention</code> String (human readable time, such as \"10m\", \"1h\", etc.) How much data is stored at once in terms of time. <code>unnormalized_cpu</code> Boolean Show process CPU% without normalizing over the number of cores. <code>expanded</code> Boolean Expand the default widget upon starting the app. <code>memory_legend</code> String (one of [\"none\", \"top-left\", \"top\", \"top-right\", \"left\", \"right\", \"bottom-left\", \"bottom\", \"bottom-right\"]) Where to place the legend for the memory widget. <code>network_legend</code> String (one of [\"none\", \"top-left\", \"top\", \"top-right\", \"left\", \"right\", \"bottom-left\", \"bottom\", \"bottom-right\"]) Where to place the legend for the network widget. <code>average_cpu_row</code> Boolean Moves the average CPU usage entry to its own row when using basic mode."},{"location":"configuration/config-file/layout/","title":"Layout","text":"<p>Warning</p> <p>This section is in progress, and is just copied from the old documentation.</p> <p>bottom supports customizable layouts via the config file. Currently, layouts are controlled by using TOML objects and arrays.</p> <p>For example, given the sample layout:</p> <pre><code>[[row]]\n  [[row.child]]\n  type=\"cpu\"\n[[row]]\n    ratio=2\n    [[row.child]]\n      ratio=4\n      type=\"mem\"\n    [[row.child]]\n      ratio=3\n      [[row.child.child]]\n        type=\"temp\"\n      [[row.child.child]]\n        type=\"disk\"\n</code></pre> <p>This would give a layout that has two rows, with a 1:2 ratio. The first row has only the CPU widget. The second row is split into two columns with a 4:3 ratio. The first column contains the memory widget. The second column is split into two rows with a 1:1 ratio. The first is the temperature widget, the second is the disk widget.</p> <p>This is what the layout would look like when run:</p> <p></p> <p>Each <code>[[row]]</code> represents a row in the layout. A row can have any number of <code>child</code> values. Each <code>[[row.child]]</code> represents either a column or a widget. A column can have any number of <code>child</code> values as well. Each <code>[[row.child.child]]</code> represents a widget. A widget is represented by having a <code>type</code> field set to a string.</p> <p>The following <code>type</code> values are supported:</p> <code>\"cpu\"</code> CPU chart and legend <code>\"mem\", \"memory\"</code> Memory chart <code>\"net\", \"network\"</code> Network chart and legend <code>\"proc\", \"process\", \"processes\"</code> Process table and search <code>\"temp\", \"temperature\"</code> Temperature table <code>\"disk\"</code> Disk table <code>\"empty\"</code> An empty space <code>\"batt\", \"battery\"</code> Battery statistics <p>Each component of the layout accepts a <code>ratio</code> value. If this is not set, it defaults to 1.</p> <p>Furthermore, you can have duplicate widgets.</p> <p>For an example, look at the default config, which contains the default layout.</p>"},{"location":"configuration/config-file/processes/","title":"Processes","text":""},{"location":"configuration/config-file/processes/#columns","title":"Columns","text":"<p>You can configure which columns are shown by the process widget by setting the <code>columns</code> setting:</p> <pre><code>[processes]\n# Pick which columns you want to use in any order.\ncolumns = [\"cpu%\", \"mem%\", \"pid\", \"name\", \"read\", \"write\", \"tread\", \"twrite\", \"state\", \"user\", \"time\", \"gmem%\", \"gpu%\"]\n</code></pre>"},{"location":"configuration/config-file/styling/","title":"Styling","text":"<p>Various parts of the bottom can be styled, using either built-in themes or custom theming.</p>"},{"location":"configuration/config-file/styling/#precedence","title":"Precedence","text":"<p>As there are a few ways styles can be applied to bottom, the order of which styles are prioritized are, in order of highest precedence to lowest precedence:</p> <ol> <li>Built-in themes set via command-line args (e.g. <code>btm --theme gruvbox</code>)</li> <li>Custom themes set via config file</li> <li>Built-in themes set via config file</li> </ol> <p>If nothing is set, it will fall back to the default theme.</p>"},{"location":"configuration/config-file/styling/#built-in-styles","title":"Built-in styles","text":"<p>bottom has a few built-in themes:</p> <ul> <li>Default</li> <li>Nord</li> <li>Gruvbox</li> </ul> <p>These themes all also have light variants to support terminals using lighter colours.</p> <p>To set the theme from the command line:</p> <pre><code>btm --theme gruvbox\n</code></pre> <p>To set the theme using the config file:</p> <pre><code>[styles]\ntheme = \"gruvbox\"\n</code></pre>"},{"location":"configuration/config-file/styling/#custom-styling","title":"Custom styling","text":"<p>bottom's components can also be individually styled by the user to control the colour of the text style.</p>"},{"location":"configuration/config-file/styling/#colours","title":"Colours","text":"<p>You can configure the colours for components with strings that are either hex colours (e.g. <code>\"#ffffff\"</code>), RGB colours (e.g. <code>\"255, 255, 255\"</code>), or named colours. Named colours are one of the following strings:</p> <ul> <li><code>\"Black\"</code></li> <li><code>\"Red\"</code></li> <li><code>\"Green\"</code></li> <li><code>\"Yellow\"</code></li> <li><code>\"Blue\"</code></li> <li><code>\"Magenta\"</code></li> <li><code>\"Cyan\"</code></li> <li><code>\"Gray\"</code></li> <li><code>\"DarkGray\"</code></li> <li><code>\"LightRed\"</code></li> <li><code>\"LightGreen\"</code></li> <li><code>\"LightYellow\"</code></li> <li><code>\"LightBlue\"</code></li> <li><code>\"LightMagenta\"</code></li> <li><code>\"LightCyan\"</code></li> <li><code>\"White\"</code></li> </ul>"},{"location":"configuration/config-file/styling/#text","title":"Text","text":"<p>Text can generally be styled using the following TOML table:</p> <pre><code>[field]\n# The foreground colour of text.\ncolor = \"black\"\n\n# The background colour of text.\nbg_color = \"blue\"\n\n# Whether to make the text bold.\nbold = false\n\n# Inline table version\nfield = { color = \"black\", bg_color = \"blue\", bold = false }\n</code></pre> <p>All fields are optional; by default if <code>bg_color</code> is not set then there will be no background color.</p> <p>If you just want to style text by setting the foreground colour, for brevity, then you can also just set the field to be the colour itself. For example:</p> <pre><code>[styles.widgets]\nselected_text = \"#fff\"\n</code></pre>"},{"location":"configuration/config-file/styling/#configuration","title":"Configuration","text":""},{"location":"configuration/config-file/styling/#cpu","title":"CPU","text":"<p>These can be set under <code>[styles.cpu]</code>:</p> Config field Details Examples <code>all_entry_color</code> The colour of the \"All\" CPU label <code>all_entry_color = \"Red\"</code> <code>avg_entry_color</code> The colour of the average CPU label and graph line <code>avg_entry_color = \"255, 0, 255\"</code> <code>cpu_core_colors</code> Colour of each CPU threads' label and graph line. Read in order. <code>cpu_core_colors = [\"Red\", \"Blue\", \"Green\"]</code>"},{"location":"configuration/config-file/styling/#memory","title":"Memory","text":"<p>These can be set under <code>[styles.memory]</code>:</p> Config field Details Examples <code>ram_color</code> The colour of the RAM label and graph line <code>ram_color = \"Red\"</code> <code>cache_color</code> The colour of the cache label and graph line. Does not do anything on Windows. <code>cache_color = \"#ffffff\"</code> <code>swap_color</code> The colour of the swap label and graph line <code>swap_color = \"255, 0, 255\"</code> <code>arc_color</code> The colour of the ARC label and graph line <code>arc_color = \"Blue\"</code> <code>gpu_colors</code> Colour of each GPU's memory label and graph line. Read in order. <code>gpu_colors = [\"Red\", \"Blue\", \"Green\"]</code>"},{"location":"configuration/config-file/styling/#network","title":"Network","text":"<p>These can be set under <code>[styles.network]</code>:</p> Config field Details Examples <code>rx_color</code> The colour of the RX (download) label and graph line <code>rx_color = \"Red\"</code> <code>tx_color</code> The colour of the TX (upload) label and graph line <code>tx_color = \"#ffffff\"</code> <code>rx_total_color</code> The colour of the total RX (download) label in basic mode <code>rx_total_color = \"0, 0, 0\"</code> <code>tx_total_color</code> The colour of the total TX (upload) label in basic mode <code>tx_total_color = \"#000\"</code>"},{"location":"configuration/config-file/styling/#battery","title":"Battery","text":"<p>These can be set under <code>[styles.battery]</code>:</p> Config field Details Examples <code>high_battery_color</code> The colour of the battery widget bar when the battery is over 50% <code>high_battery_color = \"Red\"</code> <code>medium_battery_color</code> The colour of the battery widget bar when the battery between 10% to 50% <code>medium_battery_color = \"#ffffff\"</code> <code>low_battery_color</code> The colour of the battery widget bar when the battery is under 10% <code>low_battery_color = \"0, 0, 0\"</code>"},{"location":"configuration/config-file/styling/#tables","title":"Tables","text":"<p>These can be set under <code>[styles.tables]</code>:</p> Config field Details Examples <code>headers</code> Text styling for table headers <code>headers = { color = \"red\", bg_color = \"black\", bold = true }</code>"},{"location":"configuration/config-file/styling/#graphs","title":"Graphs","text":"<p>These can be set under <code>[styles.graphs]</code>:</p> Config field Details Examples <code>graph_color</code> The general colour of the parts of the graph <code>graph_color = \"white\"</code> <code>legend_text</code> Text styling for graph's legend text <code>legend_text = { color = \"black\", bg_color = \"blue\", bold = true }</code>"},{"location":"configuration/config-file/styling/#general-widget-settings","title":"General widget settings","text":"<p>These can be set under <code>[styles.widgets]</code>:</p> Config field Details Examples <code>border_color</code> The colour of the widgets' borders <code>border_color = \"white\"</code> <code>selected_border_color</code> The colour of a widget's borders when the widget is selected <code>selected_border_color = \"white\"</code> <code>widget_title</code> Text styling for a widget's title <code>widget_title = { color = \"black\", bg_color = \"blue\", bold = true }</code> <code>text</code> Text styling for text in general <code>text = { color = \"black\", bg_color = \"blue\", bold = true }</code> <code>selected_text</code> Text styling for text when representing something that is selected <code>selected_text = { color = \"black\", bg_color = \"blue\", bold = true }</code> <code>disabled_text</code> Text styling for text when representing something that is disabled <code>disabled_text = { color = \"black\", bg_color = \"blue\", bold = true }</code>"},{"location":"contribution/documentation/","title":"Documentation","text":""},{"location":"contribution/documentation/#when-should-documentation-changes-be-done","title":"When should documentation changes be done?","text":"<ul> <li>Whenever a new feature is added, a bug is fixed, or a breaking change is made, it should be documented where   appropriate (ex: <code>README.md</code>, changelog, etc.)</li> <li>New methods of installation are always appreciated and should be documented</li> </ul>"},{"location":"contribution/documentation/#what-pages-need-documentation","title":"What pages need documentation?","text":"<p>There are a few areas where documentation changes are often needed:</p> <ul> <li>The <code>README.md</code></li> <li>The help menu inside of the application (located here)</li> <li>The extended documentation (here)</li> <li>The <code>CHANGELOG.md</code></li> </ul>"},{"location":"contribution/documentation/#how-should-i-addupdate-documentation","title":"How should I add/update documentation?","text":"<ol> <li> <p>Fork the repository to make changes in.</p> </li> <li> <p>Where you're adding documentation will probably affect what you need to do:</p> <code>README.md</code> or <code>CHANGELOG.md</code> <p>For changes to <code>README.md</code> and <code>CHANGELOG.md</code>, just follow the formatting provided and use any editor.</p> <p>Generally, changes to <code>CHANGELOG.md</code> will be handled  by a maintainer, and the contents of the file should follow the Keep a Changelog  format, as well as link to the relevant PR or issues.</p> Help menu <p>For changes to the help menu, try to refer to the existing code within <code>src/constants.rs</code> on how the help menu is generated.</p> Extended documentation <p>For changes to the extended documentation, you'll probably want at least Python 3.11 (older and newer versions  should be fine), MkDocs, Material for MkDocs,  <code>mdx_truly_sane_lists</code>, and optionally Mike installed. These can help with  validating your changes locally.</p> <p>You can do so through <code>pip</code> or your system's package managers. If you use <code>pip</code>, you can use venv to cleanly install  the documentation dependencies:</p> <pre><code># Change directories to the documentation.\ncd docs/\n\n # Create venv, install the dependencies, and serve the page.\n./serve.sh\n</code></pre> <p>This will serve a local version of the docs that you can open on your browser. It will update as you make changes.</p> </li> <li> <p>Once you have your documentation changes done, submit it as a pull request. For more information regarding that,    refer to Issues, Pull Requests, and Discussions.</p> </li> </ol>"},{"location":"contribution/issues-and-pull-requests/","title":"Issues, Pull Requests, and Discussions","text":""},{"location":"contribution/issues-and-pull-requests/#discussions","title":"Discussions","text":"<p>Discussions are open in the repo. As for the difference between discussions and issues:</p> <ul> <li>Open an issue if what you have enough information to properly fill out any details needed for a report or request.</li> <li>Open a discussion otherwise (e.g. asking a question).</li> </ul>"},{"location":"contribution/issues-and-pull-requests/#opening-an-issue","title":"Opening an issue","text":""},{"location":"contribution/issues-and-pull-requests/#bug-reports","title":"Bug reports","text":"<p>When filing a bug report, please use the bug report template and fill in as much as you can. It is incredibly difficult for a maintainer to fix a bug when it cannot be reproduced, and giving as much detail as possible generally helps to make it easier to reproduce the problem!</p>"},{"location":"contribution/issues-and-pull-requests/#feature-requests","title":"Feature requests","text":"<p>Please use the feature request template and fill it out. Remember to give details about what the feature is along with why you think this suggestion will be useful.</p> <p>Also, please check whether an existing issue has covered your specific feature request!</p>"},{"location":"contribution/issues-and-pull-requests/#pull-requests","title":"Pull requests","text":"<p>The expected workflow for a pull request is:</p> <ol> <li>Fork the project.</li> <li>Make your changes.</li> <li>Make any documentation changes if necessary - if you add a new feature, it'll probably need documentation changes. See here for tips on documentation.</li> <li>Commit and create a pull request to merge into the <code>main</code> branch. Please fill out the pull request template.</li> <li>Ask a maintainer to review your pull request.<ul> <li>Check if the CI workflow passes. These consist of clippy lints, rustfmt checks, and basic tests. If you are a    first-time contributor, you may need to wait for a maintainer to let CI run.</li> <li>If changes are suggested or any comments are made, they should probably be addressed.</li> </ul> </li> <li>Once it looks good, it'll be merged! Note that generally, PRs are squashed to maintain repo cleanliness, though    feel free to ask otherwise if that isn't preferable.</li> </ol>"},{"location":"contribution/packaging-and-distribution/","title":"Packaging and Distribution","text":"<p>Package maintainers are always welcome and appreciated! Here's some info on how one can help with package distribution and bottom.</p>"},{"location":"contribution/packaging-and-distribution/#pre-built-binaries","title":"Pre-built binaries","text":"<p>The latest stable release can be found here, where you can find pre-built binaries in either a <code>tar.gz</code> or <code>zip</code> format. Binaries here also include automatically generated shell completion files for zsh, bash, fish, and Powershell, which you may want to also install during the packaging process.</p> <p>You can also find a nightly build in the releases page, built every day at 00:00 UTC off of the <code>main</code> branch.</p> <p>In both cases, we use a combination of GitHub Actions and CirrusCI (mainly for FreeBSD and macOS M1) to create our release binaries. <code>build_releases.yml</code> contains the GitHub Action workflow used to do both of these, if reference is needed.</p>"},{"location":"contribution/packaging-and-distribution/#building-manually","title":"Building manually","text":"<p>If you want to manually build bottom rather than distributing a pre-built binary, you'll need the most recent version of stable Rust, which you can get with:</p> <pre><code>rustup update stable\n</code></pre> <p>You'll then want to build with:</p> <pre><code>cargo build --release --locked\n</code></pre>"},{"location":"contribution/packaging-and-distribution/#manpage-and-completion-generation","title":"Manpage and completion generation","text":"<p>bottom uses a <code>build.rs</code> script to automatically generate a manpage and shell completions for the following shells:</p> <ul> <li>Bash</li> <li>Zsh</li> <li>Fish</li> <li>Powershell</li> <li>Elvish</li> </ul> <p>If you want to generate manpages and/or completion files, set the <code>BTM_GENERATE</code> env var to a non-empty value. For example, run something like this:</p> <pre><code>BTM_GENERATE=true cargo build --release --locked\n</code></pre> <p>This will automatically generate completion and manpage files in <code>target/tmp/bottom/</code>. If you wish to regenerate the files, modify/delete either these files or set <code>BTM_GENERATE</code> to some other non-empty value to retrigger the build script.</p> <p>For more information, you may want to look at either the <code>build.rs</code> file or the binary build CI workflow.</p>"},{"location":"contribution/packaging-and-distribution/#adding-an-installation-source","title":"Adding an installation source","text":"<p>Once you've finished your installation source, if you want to mention it in the main bottom repo, fork the repo and add the installation method and any details to the <code>README.md</code> file under the Installation section, as well as a corresponding table of contents entry. Once that's done, open a pull request - these will usually be approved of very quickly.</p> <p>You can find more info on the contribution process here.</p>"},{"location":"contribution/development/build_process/","title":"Build Process","text":"<p>Warning</p> <p>This section is currently somewhat WIP.</p> <p>Warning</p> <p>This section is intended for people who wish to work on/build/distribute bottom, not general users.</p>"},{"location":"contribution/development/build_process/#overview","title":"Overview","text":"<p>bottom manages its own binary builds for nightly and stable release purposes. The core build workflow is handled by <code>build_releases.yml</code>, called by a wrapper workflow for nightly and stable releases. Builds take place via GitHub Actions.</p> <p>The main things built are:</p> <ul> <li>Binaries for various platforms</li> <li>MSI installer for Windows</li> <li><code>.deb</code> package for Debian and its derivatives</li> </ul> <p>This documentation gives a high-level overview of the build process for each part. For the most up-to-date and detailed reference, definitely refer back to the <code>build_releases.yml</code> file.</p>"},{"location":"contribution/development/build_process/#binaries","title":"Binaries","text":"<p>Binaries are built currently for various targets. Note that not all of these are officially supported. The following general steps are performed:</p> <ul> <li>Set up the Rust toolchain for the action runner.</li> <li>Enable cache.</li> <li> <p>Build a release build with:</p> <ul> <li><code>--features deploy</code>, which enables only crates needed for release builds.</li> <li><code>--locked</code> to lock the dependency versions.</li> <li> <p>The following env variables set:</p> <ul> <li><code>BTM_GENERATE: true</code></li> <li><code>COMPLETION_DIR: \"target/tmp/bottom/completion/\"</code></li> <li><code>MANPAGE_DIR: \"target/tmp/bottom/manpage/\"</code></li> </ul> <p>These generate the manpages and shell completions (see Packaging for some more information).</p> </li> </ul> </li> </ul> <ul> <li>Bundle the binaries and manpage/completions.</li> <li>Cleanup.</li> </ul> <p>Some builds use <code>cross</code> to do cross-compilation builds for architectures otherwise not natively supported by the runner.</p>"},{"location":"contribution/development/build_process/#msi","title":"MSI","text":"<p>This builds a full Windows installer using <code>cargo-wix</code>. This requires some setup beforehand with some dependencies:</p> <ul> <li>Net-Framework-Core (handled by Powershell)</li> <li>wixtoolset (handled by chocolatey)</li> <li>Rust toolchain</li> </ul> <p>After that, cache is enabled, and <code>cargo wix</code> takes care of the rest.</p>"},{"location":"contribution/development/build_process/#deb","title":"<code>.deb</code>","text":"<p>Currently, <code>.deb</code> files are built for x86 and ARM architectures (<code>armv7</code>, <code>aarch64</code>). This is handled by <code>cargo-deb</code>.</p> <ul> <li>For x86, this is handled natively with just <code>cargo-deb</code>.</li> <li>For ARM, this uses a Docker container, cargo-deb-arm, which correctly sets the dependencies and architecture for the generated <code>.deb</code> file.</li> </ul> <p>There are additional checks via <code>dpkg</code> to ensure the architecture is correctly set.</p>"},{"location":"contribution/development/deploy_process/","title":"Deploy Process","text":"<p>Warning</p> <p>This section is currently WIP.</p> <p>Warning</p> <p>This section is intended for people who wish to work on/build/distribute bottom, not general users.</p>"},{"location":"contribution/development/deploy_process/#overview","title":"Overview","text":"<p>bottom currently has two main deploy processes to worry about:</p> <ul> <li>Nightly: a daily (00:00 UTC) GitHub action to build binary/installer files, and upload them to the nightly release. It can also be triggered manually as either a proper nightly release or a mock release.</li> <li> <p>Stable: a stable deployment, triggered manually or upon creation of a valid tag. This is a GitHub action that builds binary/installer files and uploads them to a new GitHub release.</p> <p>Furthermore, this workflow does not handle the following deployments, which must be manually handled:</p> <ul> <li>Chocolatey</li> <li>crates.io</li> </ul> </li> </ul>"},{"location":"contribution/development/deploy_process/#nightly","title":"Nightly","text":"<p>This is, for the most part, automatic, though it can also be used as a way of testing build workflow changes and seeing if binaries can be successfully built at all against all the targets we want to build for.</p> <p>If one does not want to actually update the nightly release, and just want to test the general builds and workflow, one can run the workflow manually on a branch of choice with \"mock\" set as the parameter. Changing it to anything else will trigger a non-mock run.</p>"},{"location":"contribution/development/deploy_process/#stable","title":"Stable","text":"<p>This can be manually triggered, though the general use-case is setting a tag of the form <code>x.y.z</code> (after checking everything is good, of course). For example:</p> <pre><code>git tag 0.6.9 &amp;&amp; git push origin 0.6.9\n</code></pre> <p>This will automatically trigger the deployment workflow, and create a draft release with the files uploaded. One still needs to fill in the details and release it.</p> <p>Furthermore, there are some deployments that are handled by maintainers of bottom that this workflow does not automatically finish. These must be manually handled.</p>"},{"location":"contribution/development/deploy_process/#chocolatey","title":"Chocolatey","text":"<p>Upon releasing on GitHub, choco-bottom will automatically be updated with a new PR with the correct deployment files for Chocolatey. Check the PR, merge it if it is correct, then pull locally and deploy following the instructions in the README. Make sure to test installation and running at least once before deploying!</p> <p>If done correctly, there should be a new build on Chocolatey, which will take some time to validate.</p>"},{"location":"contribution/development/deploy_process/#cratesio","title":"crates.io","text":"<p>Validate everything builds properly and works (you should have done this before releasing though). If good, then deploying on crates.io is as simple as:</p> <pre><code>cargo publish\n</code></pre>"},{"location":"contribution/development/dev_env/","title":"Development Environment","text":"<p>Warning</p> <p>This section is currently WIP.</p> <p>Warning</p> <p>This section is intended for people who wish to work on/build/distribute bottom, not general users.</p>"},{"location":"contribution/development/logging/","title":"Logging","text":"<p>Warning</p> <p>This section is currently WIP.</p> <p>Warning</p> <p>This section is intended for people who wish to work on/build/distribute bottom, not general users.</p>"},{"location":"contribution/development/testing/","title":"Testing","text":"<p>Warning</p> <p>This section is currently WIP.</p> <p>Warning</p> <p>This section is intended for people who wish to work on/build/distribute bottom, not general users.</p>"},{"location":"support/official/","title":"Official support","text":"<p>bottom officially supports the following operating systems and corresponding architectures:</p> <ul> <li>macOS (<code>x86_64</code>, <code>aarch64</code>)</li> <li>Linux (<code>x86_64</code>, <code>i686</code>, <code>aarch64</code>)</li> <li>Windows (<code>x86_64</code>, <code>i686</code>)</li> </ul> <p>These platforms are tested to work (with caveats, see below) and issues on these platforms will be fixed if possible.</p> <p>Furthermore, binaries are expected to be built and tested using the most recent version of stable Rust - if you are manually building bottom from the repo/source, then please try that as well.</p>"},{"location":"support/official/#known-problems","title":"Known problems","text":""},{"location":"support/official/#linux","title":"Linux","text":"<ul> <li>If you're using Linux via WSL or WSL2:<ul> <li>You may have issues with getting memory data.</li> <li>Temperature sensors may not be correctly reported.</li> <li>WSL2 will not match Windows' own Task Manager in terms of data.</li> </ul> </li> </ul>"},{"location":"support/official/#windows","title":"Windows","text":"<ul> <li>The temperature widget seems to require admin privileges in some cases to get data.</li> <li>The battery widget seems to have issues with dual battery systems, like some Thinkpads.</li> <li>If you are using WSL or WSL2:<ul> <li>You may have issues with getting memory data.</li> <li>Temperature sensors may not be correctly reported.</li> <li>WSL2 will not match Windows' own Task Manager in terms of data.</li> </ul> </li> </ul>"},{"location":"support/official/#macos","title":"macOS","text":"<ul> <li>The process widget may require elevated access (ex: <code>sudo btm</code>) to gather all data in some cases. Please note that you should be certain that you trust any software you grant root privileges.</li> </ul>"},{"location":"support/unofficial/","title":"Unofficial support","text":"<p>Systems and architectures that aren't officially supported may still work, but there are no guarantees on how much will work. For example, it might only compile, or it might run with bugs/broken features. Furthermore, while it will depend on the problem at the end of the day, issues on unsupported platforms are likely to go unfixed.</p> <p>Unofficially supported platforms known to compile/work:</p> <ul> <li>FreeBSD</li> <li>Linux on ARMv7 and ARMv6 (tested to compile in CI)</li> <li>Linux on PowerPC 64 LE (tested to compile in CI)</li> <li>Linux on an RISC-V (tested to compile in CI, tested to run on an Allwinner D1 Nezha)</li> </ul>"},{"location":"support/unofficial/#known-problems","title":"Known problems","text":"<p>None at the moment.</p>"},{"location":"usage/basic-mode/","title":"Basic Mode","text":"<p>Basic mode is a special layout that removes all of the graphs and provides an interface that resembles (a very stripped-down version of) htop.</p> <p>Basic mode can be enabled either through a command line flag:</p> <pre><code>btm -b\n\n# or\n\nbtm --basic\n</code></pre> <p>or through the config:</p> <pre><code>[flags]\nbasic = true\n</code></pre>"},{"location":"usage/basic-mode/#notes","title":"Notes","text":"<p>In this mode, widgets that use tables (temperatures, processes, disks, and batteries) are only shown one at a time. One can switch between these widgets either by clicking the arrow buttons or by using the general widget selection shortcuts (for example, Ctrl+Left or H) to switch which widget is shown.</p> <p>Also note that in this mode, widget expansion and custom layouts are disabled.</p>"},{"location":"usage/basic-mode/#key-bindings","title":"Key bindings","text":"<p>Basic mode follows the same key bindings as normal, barring widget expansion being disabled, and that the % key while selecting the memory widget toggles between total usage and percentage.</p>"},{"location":"usage/general-usage/","title":"General Usage","text":"<p>You can run bottom with:</p> <pre><code>btm\n</code></pre> <p>For help regarding the command-line options, use:</p> <pre><code># For a simple overview of flags\nbtm -h\n\n# For more details\nbtm --help\n</code></pre> <p>You can also see keybinds and basic usage details in bottom by pressing ?, which will open a help menu.</p>"},{"location":"usage/general-usage/#features","title":"Features","text":""},{"location":"usage/general-usage/#expansion","title":"Expansion","text":"<p>By default, bottom is somewhat like a dashboard - a bunch of different widgets, all showing different things, and they all cram together to fit into one terminal.</p> <p>If you instead just want to see one widget - maybe you want to look at a graph in more detail, for example - you can \"expand\" the currently selected widget using the e key, which will hide all other widgets and make that widget take up all available terminal space.</p> <p>You can leave this state by either pressing e again or pressing Esc.</p>"},{"location":"usage/general-usage/#widget-selection","title":"Widget selection","text":"<p>To allow for widget-specific keybindings and expansion, there is the idea of widget selection in bottom, where you can focus on a specific widget to work with it. This can be done with the mouse (just click on the widget of interest) or keyboard (ex: Ctrl+Direction, see Key bindings for alternatives).</p>"},{"location":"usage/general-usage/#key-bindings","title":"Key bindings","text":"<p>These are global or common keyboard shortcuts for the application, which you can see in-app through the ? shortcut. Note that key bindings are generally case-sensitive.</p> Binding Action q , Ctrl+c Quit Esc Close dialog windows, search, widgets, or exit expanded mode Ctrl+r Reset display and any collected data f Freeze/unfreeze updating with new data ? Open help menu e Toggle expanding the currently selected widget Ctrl+Up Shift+Up K W Select the widget above Ctrl+Down Shift+Down J S Select the widget below Ctrl+Left Shift+Left H A Select the widget on the left Ctrl+Right Shift+Right L D Select the widget on the right Up , k Move up within a widget Down , j Move down within a widget Left h Alt+h Move left within a widget Right l Alt+l Move right within a widget g+g , Home Jump to the first entry G , End Jump to the last entry Page Up , Page Down Scroll up/down a table by a page Ctrl+u Scroll up a table by half a page Ctrl+d Scroll down a table by half a page"},{"location":"usage/general-usage/#mouse-bindings","title":"Mouse bindings","text":"Binding Action Left Button Selects the widget"},{"location":"usage/widgets/battery/","title":"Battery Widget","text":"<p>Warning</p> <p>The battery features are unavailable if the binary is compiled with the <code>battery</code> feature disabled or if there are no batteries on the system!</p> <p>The battery widget provides information about batteries on the system.</p> <p>The battery widget can be enabled through either the <code>--battery</code> flag, the <code>battery = true</code> option in a config file, or specifying the widget in a custom layout.</p>"},{"location":"usage/widgets/battery/#features","title":"Features","text":"<p>The following data is displayed for batteries:</p> <ul> <li>Charge percent</li> <li>Consumption rate</li> <li>Charging state</li> <li>Time to empty/charge, based on the current state</li> <li>Battery health percent</li> </ul> <p>The battery widget also supports devices with multiple batteries, and you can switch between them using the keyboard or the mouse.</p>"},{"location":"usage/widgets/battery/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p> Binding Action Left h Alt+h Moves to the battery entry to the left of the current one Right l Alt+l Moves to the battery entry to the right of the current one"},{"location":"usage/widgets/battery/#mouse-bindings","title":"Mouse bindings","text":"Binding Action Left Button Selects a battery entry"},{"location":"usage/widgets/cpu/","title":"CPU Widget","text":"<p>The CPU widget displays a visual representation of CPU usage over a time range.</p>"},{"location":"usage/widgets/cpu/#features","title":"Features","text":"<p>The CPU widget is composed of two parts: the graph and the legend:</p> <ul> <li>The graph displays the usage data for the currently selected entry as a percentage</li> <li>The legend displays all available entries that can be displayed on the graph along with their last recorded use percentage (except for the \"All\" option)</li> </ul> <p>Users can scroll through the legend using either the keyboard or mouse to select which entry to display on the graph. The \"All\" option shows every entry at the same time, though this may get a bit hard to follow if you have a large number of cores/threads.</p> <p>One can also adjust the displayed time range through either the keyboard or mouse, with a range of 30s to 600s.</p>"},{"location":"usage/widgets/cpu/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p>"},{"location":"usage/widgets/cpu/#graph","title":"Graph","text":"Binding Action + Zoom in on chart (decrease time range) - Zoom out on chart (increase time range) = Reset zoom"},{"location":"usage/widgets/cpu/#legend","title":"Legend","text":"Binding Action Up , k Move up within a widget Down , j Move down within a widget g+g , Home Jump to the first entry in the legend G , End Jump to the last entry in the legend"},{"location":"usage/widgets/cpu/#mouse-bindings","title":"Mouse bindings","text":""},{"location":"usage/widgets/cpu/#graph_1","title":"Graph","text":"Binding Action Scroll Scrolling up or down zooms in or out of the graph respectively"},{"location":"usage/widgets/cpu/#legend_1","title":"Legend","text":"Binding Action Scroll Scroll through options to display in the graph Left Button Selects a CPU thread/average to show in the graph"},{"location":"usage/widgets/disk/","title":"Disk Widget","text":"<p>The disk widget provides a table of useful disk and partition information, like I/O per second and total usage.</p>"},{"location":"usage/widgets/disk/#features","title":"Features","text":"<p>The disk widget provides the following information:</p> <ul> <li>Disk name</li> <li>Disk mount location</li> <li>Amount of space used</li> <li>Amount of space left</li> <li>Total amount of space</li> <li>Percentage of space used</li> <li>Read per second</li> <li>Write per second</li> </ul>"},{"location":"usage/widgets/disk/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p> Binding Action Up , k Move up within a widget Down , j Move down within a widget g+g , Home Jump to the first entry in the table G , End Jump to the last entry in the table d Sort by disk, press again to reverse sorting order m Sort by mount, press again to reverse sorting order u Sort by amount used, press again to reverse sorting order n Sort by amount free, press again to reverse sorting order t Sort by total space available, press again to reverse sorting order p Sort by percentage used, press again to reverse sorting order r Sort by read rate, press again to reverse sorting order w Sort by write rate, press again to reverse sorting order"},{"location":"usage/widgets/disk/#mouse-bindings","title":"Mouse bindings","text":"Binding Action Left Button Selects an entry in the table"},{"location":"usage/widgets/memory/","title":"Memory Widget","text":"<p>The memory widget provides a visual representation of RAM and swap usage over time.</p>"},{"location":"usage/widgets/memory/#features","title":"Features","text":"<p>The legend displays the current usage in terms of percentage and actual usage in binary units (KiB, MiB, GiB, etc.). If the total RAM or swap available is 0, then it is automatically hidden from the legend and graph.</p> <p>One can also adjust the displayed time range through either the keyboard or mouse, with a range of 30s to 600s.</p> <p>This widget can also be configured to display Nvidia GPU memory usage (<code>--disable_gpu</code> on Linux/Windows to disable) or cache memory usage (<code>--enable_cache_memory</code>).</p>"},{"location":"usage/widgets/memory/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p> Binding Action + Zoom in on chart (decrease time range) - Zoom out on chart (increase time range) = Reset zoom"},{"location":"usage/widgets/memory/#mouse-bindings","title":"Mouse bindings","text":"Binding Action Scroll Scrolling up or down zooms in or out of the graph respectively"},{"location":"usage/widgets/memory/#calculations","title":"Calculations","text":"<p>Memory usage is calculated using the following formula based on values from <code>/proc/meminfo</code> (based on htop's implementation):</p> <pre><code>MemTotal - MemFree - Buffers - (Cached + SReclaimable - Shmem)\n</code></pre> <p>You can find more info on <code>/proc/meminfo</code> and its fields here.</p>"},{"location":"usage/widgets/network/","title":"Network Widget","text":"<p>The network widget provides a visual representation of network input and output per second, as well as noting the total amount received and transmitted.</p>"},{"location":"usage/widgets/network/#features","title":"Features","text":"<p>The legend displays the current reads and writes per second in bits, as well as the total amount read/written.</p> <p>The y-axis automatically scales based on shown read/write values, and by default, is a linear scale based on base-10 units (e.x. kilobit, gigabit, etc.). Through configuration, the read/write per second unit can be changed to bytes, while the y-axis can be changed to a log scale and/or use base-2 units (e.x. kibibit, gibibit, etc.).</p> <p>One can also adjust the displayed time range through either the keyboard or mouse, with a range of 30s to 600s.</p>"},{"location":"usage/widgets/network/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p> Binding Action + Zoom in on chart (decrease time range) - Zoom out on chart (increase time range) = Reset zoom"},{"location":"usage/widgets/network/#mouse-bindings","title":"Mouse bindings","text":"Binding Action Scroll Scrolling up or down zooms in or out of the graph respectively"},{"location":"usage/widgets/process/","title":"Process Widget","text":"<p>The process widget displays a table containing information regarding a running process, along with sorting, searching, and process control features.</p>"},{"location":"usage/widgets/process/#features","title":"Features","text":"<p>The process widget has three main components:</p> <ul> <li>The main process table</li> <li>The search sub-widget (opened with Ctrl+f or /)</li> <li>The sort menu sub-widget (opened with s or F6)</li> </ul> <p>By default, the main process table displays the following information for each process:</p> <ul> <li>PID</li> <li>Name of the process</li> <li>CPU use percentage (note this is averaged out per available thread by default)</li> <li>Memory use percentage</li> <li>Disk reads per second</li> <li>Disk writes per second</li> <li>Total amount read from disk</li> <li>Total amount written from disk</li> <li>User</li> <li>Process state</li> <li> <p>Process uptime</p> <p>Info</p> <p>On Windows, the I/O counters will report all reads/writes, not just disk. See here for more details.</p> </li> </ul> <p>With the feature flag (<code>--disable_gpu</code> on Linux/Windows to disable) and gpu process columns enabled in the configuration:</p> <ul> <li>GPU memory use percentage</li> <li>GPU core utilization percentage</li> </ul> <p>See the processes configuration page on how to customize which columns are shown.</p>"},{"location":"usage/widgets/process/#sorting","title":"Sorting","text":"<p>The table can be sorted by clicking on the table headers, which will either sort the table by that column, or if already sorting by that column, reverse the sorting order.</p> <p>Alternatively, one can sort using the sort menu sub-widget, which is brought up using s or F6, and can be controlled by arrow keys or the mouse.</p>"},{"location":"usage/widgets/process/#grouping","title":"Grouping","text":"<p>Pressing Tab in the table will group entries with the same name together. The PID column will be replaced with the number of entries in each group, and usage is added together when displayed.</p> <p>Note that the process state and user columns are disabled in this mode.</p>"},{"location":"usage/widgets/process/#process-termination","title":"Process termination","text":"<p>Pressing d+d or F9 will allow you to terminate the currently selected process/process group. On Unix-like operating systems, you are also able to control which specific signals to send (e.g. <code>SIGKILL</code>, <code>SIGTERM</code>).</p> <sub>The process termination menu on Linux</sub> <p>If you're on Windows, or if the <code>disable_advanced_kill</code> flag is set in the options or command-line, then a simpler termination screen will be shown to confirm whether you want to kill that process/process group.</p> <sub>The process termination menu on Windows</sub>"},{"location":"usage/widgets/process/#tree-mode","title":"Tree mode","text":"<p>Pressing t or F5 in the table toggles tree mode in the process widget, displaying processes in regard to their parent-child process relationships.</p> <p>A process in tree mode can also be \"collapsed\", hiding its children and any descendants, using either the - or + keys, or double-clicking on an entry.</p> <p>Lastly, note that in tree mode, processes cannot be grouped together due to the behaviour of the two modes somewhat clashing.</p>"},{"location":"usage/widgets/process/#full-command","title":"Full command","text":"<p>You can show the full command instead of just the process name by pressing P.</p>"},{"location":"usage/widgets/process/#search","title":"Search","text":"<p>Pressing / or Ctrl+f will open up the search sub-widget. By default, just typing in something will search by the process name.</p> <p>This search can be further enhanced by matching by case, matching the entire word, or by regex.</p> <p>We are able to also search for multiple things/conditions.</p> <p>And if our search uses a keyword, we need to use quotation marks around the term to properly search it.</p> <p>Lastly, we can refine our search even further based on the other columns, like PID, CPU usage, etc., as well as grouping together conditions.</p> <p>You can also paste search queries (e.g. Shift+Ins, Ctrl+Shift+v).</p>"},{"location":"usage/widgets/process/#keywords","title":"Keywords","text":"<p>Note all keywords are case-insensitive. To search for a process/command that collides with a keyword, surround the term with quotes (e.x. <code>\"cpu\"</code>).</p> Keywords Example Description <code>btm</code> Matches by process or command name; supports regex <code>pid</code> <code>pid=1044</code> Matches by PID; supports regex <code>cpu</code> <code>cpu%</code> <code>cpu &gt; 0.5</code> Matches the CPU column; supports comparison operators <code>memb</code> <code>memb &gt; 1000 b</code> Matches the memory column in terms of bytes; supports comparison operators <code>mem</code> <code>mem%</code> <code>mem &lt; 0.5</code> Matches the memory column in terms of percent; supports comparison operators <code>read</code> <code>r/s</code> <code>rps</code> <code>read = 1 mb</code> Matches the read/s column in terms of bytes; supports comparison operators <code>write</code> <code>w/s</code> <code>wps</code> <code>write &gt;= 1 kb</code> Matches the write/s column in terms of bytes; supports comparison operators <code>tread</code> <code>t.read</code> <code>tread &lt;= 1024 gb</code> Matches he total read column in terms of bytes; supports comparison operators <code>twrite</code> <code>t.write</code> <code>twrite &gt; 1024 tb</code> Matches the total write column in terms of bytes; supports comparison operators <code>user</code> <code>user=root</code> Matches by user; supports regex <code>state</code> <code>state=running</code> Matches by state; supports regex <code>()</code> <code>(&lt;COND 1&gt; AND &lt;COND 2&gt;) OR &lt;COND 3&gt;</code> Group together a condition <code>gmem</code> <code>gmem &gt; 1000 b</code> Matches the gpu memory column in terms of bytes; supports comparison operators <code>gmem%</code> <code>gmem% &lt; 0.5</code> Matches the gpu memory column in terms of percent; supports comparison operators <code>gpu%</code> <code>gpu% &gt; 0</code> Matches the gpu usage column in terms of percent; supports comparison operators"},{"location":"usage/widgets/process/#comparison-operators","title":"Comparison operators","text":"Keywords Description <code>=</code> Checks if the values are equal <code>&gt;</code> Checks if the left value is strictly greater than the right <code>&lt;</code> Checks if the left value is strictly less than the right <code>&gt;=</code> Checks if the left value is greater than or equal to the right <code>&lt;=</code> Checks if the left value is less than or equal to the right"},{"location":"usage/widgets/process/#logical-operators","title":"Logical operators","text":"<p>Note all operators are case-insensitive, and the <code>and</code> operator takes precedence over the <code>or</code> operator.</p> Keywords Usage Description <code>and</code> <code>&amp;&amp;</code> <code>&lt;Space&gt;</code> <code>&lt;COND 1&gt; and &lt;COND 2&gt;</code> <code>&lt;COND 1&gt; &amp;&amp; &lt;COND 2&gt;</code> <code>&lt;COND 1&gt; &lt;COND 2&gt;</code> Requires both conditions to be true to match <code>or</code> <code>||</code> <code>&lt;COND 1&gt; or &lt;COND 2&gt;</code> <code>&lt;COND 1&gt; &amp;#124;&amp;#124; &lt;COND 2&gt;</code> Requires at least one condition to be true to match"},{"location":"usage/widgets/process/#units","title":"Units","text":"<p>All units are case-insensitive.</p> Keywords Description <code>B</code> Bytes <code>KB</code> Kilobytes <code>MB</code> Megabytes <code>GB</code> Gigabytes <code>TB</code> Terabytes <code>KiB</code> Kibibytes <code>MiB</code> Mebibytes <code>GiB</code> Gibibytes <code>TiB</code> Tebibytes"},{"location":"usage/widgets/process/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p>"},{"location":"usage/widgets/process/#process-table","title":"Process table","text":"Binding Action Up , k Move up within a widget Down , j Move down within a widget g+g , Home Jump to the first entry in the table G , End Jump to the last entry in the table d+d , F9 Send a kill signal to the selected process c Sort by CPU usage, press again to reverse sorting order m Sort by memory usage, press again to reverse sorting order p Sort by PID name, press again to reverse sorting order n Sort by process name, press again to reverse sorting order Tab Toggle grouping processes with the same name P Toggle between showing the full command or just the process name Ctrl+f , / Toggle showing the search sub-widget s , F6 Toggle showing the sort sub-widget I Invert the current sort % Toggle between values and percentages for memory usage t , F5 Toggle tree mode M Sort by gpu memory usage, press again to reverse sorting order C Sort by gpu usage, press again to reverse sorting order"},{"location":"usage/widgets/process/#sort-sub-widget","title":"Sort sub-widget","text":"Binding Action Up , k Move up within a widget Down , j Move down within a widget g+g , Home Jump to the first entry in the table G , End Jump to the last entry in the table Esc Close the sort sub-widget Enter Sorts the corresponding process table"},{"location":"usage/widgets/process/#search-sub-widget","title":"Search sub-widget","text":"Binding Action Left h Alt+h Moves the cursor left Right l Alt+l Moves the cursor right Esc Close the search widget (retains the filter) Ctrl+a Skip to the start of the search query Ctrl+e Skip to the end of the search query Ctrl+u Clear the current search query Ctrl+w Delete a word behind the cursor Ctrl+h Delete the character behind the cursor Backspace Delete the character behind the cursor Del Delete the character at the cursor Alt+c , F1 Toggle matching case Alt+w , F2 Toggle matching the entire word Alt+r , F3 Toggle using regex"},{"location":"usage/widgets/process/#mouse-bindings","title":"Mouse bindings","text":""},{"location":"usage/widgets/process/#process-table_1","title":"Process table","text":"Binding Action Scroll Selects a CPU thread/average to show in the graph Left Button Table header: Sorts/reverse sorts the table by the column  Table entry: Selects an entry in the table, if in tree mode, collapses/expands the entry's children"},{"location":"usage/widgets/process/#sort-sub-widget_1","title":"Sort sub-widget","text":"Binding Action Left Button Selects an entry in the table"},{"location":"usage/widgets/temperature/","title":"Temperature Widget","text":"<p>The temperature widget provides a table of temperature sensors and their current temperature.</p>"},{"location":"usage/widgets/temperature/#features","title":"Features","text":"<p>The temperature widget provides the sensor name as well as its current temperature.</p> <p>This widget can also be configured to display Nvidia GPU temperatures (<code>--disable_gpu</code> on Linux/Windows to disable).</p>"},{"location":"usage/widgets/temperature/#key-bindings","title":"Key bindings","text":"<p>Note that key bindings are generally case-sensitive.</p> Binding Action Up , k Move up within a widget Down , j Move down within a widget g+g , Home Jump to the first entry in the table G , End Jump to the last entry in the table t Sort by temperature, press again to reverse sorting order s Sort by sensor name, press again to reverse sorting order"},{"location":"usage/widgets/temperature/#mouse-bindings","title":"Mouse bindings","text":"Binding Action Left Button Selects an entry in the table"}]}